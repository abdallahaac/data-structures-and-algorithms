// creating a singly linked list with the following functionanilty
// Insertion: Adding a new node to the linked list, either at the beginning, end, or a specific position.
// Deletion: Removing a node from the linked list, either based on its value or its position in the list.
// Search:  Finding a specific node in the linked list based on its value.
// Traversal: Iterating through all the nodes in the linked list to access their values.
// Length: Finding the number of nodes in the linked list.
// Reverse: Reversing the order of the nodes in the linked list.
// Sort: Sorting the nodes in the linked list based on their values.

class Node {
	constructor(data) {
		this.data = data;
		this.next = null;
	}
}

class SinglyLinkedList {
	constructor() {
		// head:
		// contains data
		// contains Node
		// Node contains data variable and a Node variable called next 'pointing' to the next node
		this.head = null;
		this.tail = null;
		this.length = 0;
	}

	// Add a node to the end of the list

	append(data) {
		const newNode = new Node(data);
		if (this.head == null) {
			this.head = newNode;
			this.tail = newNode;
		} else {
			this.tail.next = newNode;
			this.tail = newNode;
		}
		this.length++;
		return this;
	}
	// Add a node to the beginning of the list

	prepend(data) {
		// assigning the value of a new Node to newNode
		const newNode = new Node(data);
		newNode.next = this.head;
		this.head = newNode;
		this.length++;
		return this;
	}

	// check if the head is not null - it has a value
	//iterate over every node in the list and check if it has the same value
	// if it does
	remove(data) {
		let current = this.head;

		// Check if linked list is empty
		if (this.head === null) {
			return "Linked list is empty.";
		}

		// Check if node to be removed is the head node
		if (current.data === data) {
			this.head = current.next; // this.head = this.head.next
			this.length--;
			return this;
		}

		// Iterate over linked list to find node with matching data
		while (current.next) {
			if (current.next.data === data) {
				break;
			}
			current = current.next;
		}

		// Check if node was not found
		if (!current.next) {
			return "Node not found.";
		}

		// Update previous node's next reference to point to next node
		current.next = current.next.next;

		// Decrement length of linked list
		this.length--;
		return this;
	}
}

const list = new SinglyLinkedList();
list.append(1);

console.log(list);
